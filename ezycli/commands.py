#!/usr/bin/env python3
import argparse
import os
import sys
import subprocess
import json
import py_compile
import shutil

CLI_VERSION = "0.1.0"

def new_project(project_name):
    project_path = os.path.join(os.getcwd(), project_name)
    if os.path.exists(project_path):
        print(f"오류: '{project_name}' 프로젝트가 이미 존재합니다.", file=sys.stderr)
        sys.exit(1)
    os.makedirs(project_path)
    os.makedirs(os.path.join(project_path, "test"))
    with open(os.path.join(project_path, ".gitignore"), "w", encoding="utf-8") as f:
        f.write(""".venv
__pycache__/
*.pyc
.env
""")
    cli_config = {
        "collection": "@ezy/python",
        "version": CLI_VERSION,
        "project": project_name
    }
    with open(os.path.join(project_path, "ezy-cli.json"), "w", encoding="utf-8") as f:
        json.dump(cli_config, f, indent=2)
    with open(os.path.join(project_path, "pyproject.toml"), "w", encoding="utf-8") as f:
        f.write(f"""[project]
name = "{project_name}"
version = "0.1.0"
description = "Ezy API 프로젝트"
authors = [{{ name="Your Name"}}]
dependencies = []

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"
""")
    with open(os.path.join(project_path, "requirements.txt"), "w", encoding="utf-8") as f:
        f.write("""# 의존성 패키지
ezy-api
fastapi>=0.68.0
uvicorn>=0.15.0
pydantic>=1.8.0
inflect>=5.3.0
pytest>=6.2.5
flake8>=3.9.0
""")
    main_py_path = os.path.join(project_path, "main.py")
    with open(main_py_path, "w", encoding="utf-8") as f:
        f.write(f"""from ezyapi import EzyAPI

def bootstrap():
    api = EzyAPI(
        title="{project_name} API",
        description="Generated by Ezy CLI"
    )
    print("서버가 시작됩니다...")
    api.run(host="0.0.0.0", port=8000, reload=True)

if __name__ == '__main__':
    bootstrap()
""")
    print(f"새 Ezy API 프로젝트 '{project_name}'이(가) 생성되었습니다: {project_path}")
    print(f"cd {project_name} && python -m venv .venv && .venv\\Scripts\\activate && pip install -r requirements.txt")
    print("서버 실행: ezy serve")

def generate_resource(name):
    try:
        with open("ezy-cli.json", "r", encoding="utf-8") as f:
            config = json.load(f)
            project_name = config.get("project", "example")
    except Exception:
        project_name = "example"
    base_dir = os.getcwd()
    name_lower = name.lower()
    Name = name.capitalize()
    resource_dir = os.path.join(base_dir, name_lower)
    if os.path.exists(resource_dir):
        print(f"오류: 리소스 폴더가 이미 존재합니다: {resource_dir}", file=sys.stderr)
        sys.exit(1)
    os.makedirs(resource_dir)
    with open(os.path.join(resource_dir, "__init__.py"), "w", encoding="utf-8") as f:
        f.write("")
    dto_dir = os.path.join(resource_dir, "dto")
    os.makedirs(dto_dir)
    with open(os.path.join(dto_dir, "__init__.py"), "w", encoding="utf-8") as f:
        f.write("")
    entity_dir = os.path.join(resource_dir, "entity")
    os.makedirs(entity_dir)
    with open(os.path.join(entity_dir, "__init__.py"), "w", encoding="utf-8") as f:
        f.write("")
    create_dto_path = os.path.join(dto_dir, f"{name_lower}_create_dto.py")
    with open(create_dto_path, "w", encoding="utf-8") as f:
        f.write(f"""from pydantic import BaseModel

class {Name}CreateDTO(BaseModel):
    name: str
    email: str
    age: int = None
""")
    response_dto_path = os.path.join(dto_dir, f"{name_lower}_response_dto.py")
    with open(response_dto_path, "w", encoding="utf-8") as f:
        f.write(f"""from pydantic import BaseModel

class {Name}ResponseDTO(BaseModel):
    id: int
    name: str
    email: str
    age: int = None
""")
    entity_path = os.path.join(entity_dir, f"{name_lower}_entity.py")
    with open(entity_path, "w", encoding="utf-8") as f:
        f.write(f"""from ezyapi.database import EzyEntityBase

class {Name}Entity(EzyEntityBase):
    def __init__(self, id: int = None, name: str = "", email: str = "", age: int = None):
        self.id = id
        self.name = name
        self.email = email
        self.age = age
""")
    service_path = os.path.join(resource_dir, f"{name_lower}_service.py")
    service_code = f"""from ezyapi.core import route
from fastapi import HTTPException
from typing import List

from {project_name}.{name_lower}.dto.{name_lower}_response_dto import {Name}ResponseDTO
from {project_name}.{name_lower}.dto.{name_lower}_create_dto import {Name}CreateDTO
from {project_name}.{name_lower}.entity import {Name}Entity

from ezyapi import EzyService

class {Name}Service(EzyService):
    @route('get', '/name/{{name}}', description="Get {Name} by name")
    async def get_{name_lower}_by_name(self, name: str) -> {Name}ResponseDTO:
        user = await self.repository.find_one(where={{"name": name}})
        if not user:
            raise HTTPException(status_code=404, detail="{Name} not found")
        return {Name}ResponseDTO(id=user.id, name=user.name, email=user.email, age=user.age)

    async def get_{name_lower}_by_id(self, id: int) -> {Name}ResponseDTO:
        user = await self.repository.find_one(where={{"id": id}})
        if not user:
            raise HTTPException(status_code=404, detail="{Name} not found")
        return {Name}ResponseDTO(id=user.id, name=user.name, email=user.email, age=user.age)
    
    async def list_{name_lower}s(self) -> List[{Name}ResponseDTO]:
        users = await self.repository.find()
        return [
            {Name}ResponseDTO(id=user.id, name=user.name, email=user.email, age=user.age)
            for user in users
        ]
    
    async def create_{name_lower}(self, data: {Name}CreateDTO) -> {Name}ResponseDTO:
        new_user = {Name}Entity(name=data.name, email=data.email, age=data.age)
        saved_user = await self.repository.save(new_user)
        return {Name}ResponseDTO(id=saved_user.id, name=saved_user.name, email=saved_user.email, age=saved_user.age)
    
    async def update_{name_lower}_by_id(self, id: int, data: {Name}CreateDTO) -> {Name}ResponseDTO:
        user = await self.repository.find_one(where={{"id": id}})
        if not user:
            raise HTTPException(status_code=404, detail="{Name} not found")
        user.name = data.name
        user.email = data.email
        user.age = data.age
        updated_user = await self.repository.save(user)
        return {Name}ResponseDTO(id=updated_user.id, name=updated_user.name, email=updated_user.email, age=updated_user.age)
    
    async def delete_{name_lower}_by_id(self, id: int) -> dict:
        success = await self.repository.delete(id)
        if not success:
            raise HTTPException(status_code=404, detail="{Name} not found")
        return {{"message": "{Name} deleted successfully"}}
"""
    with open(service_path, "w", encoding="utf-8") as f:
        f.write(service_code)
    print(f"Resource '{name}'이(가) 생성되었습니다: {resource_dir}")

def generate_component(component_type, name):
    if component_type == "res":
        generate_resource(name)
        return
    else:
        print(f"오류: 지원하지 않는 타입입니다: {component_type} (현재는 res만 지원)", file=sys.stderr)
        sys.exit(1)

def generate_all_or_single(args):
    if len(args.args) == 1:
        print("오류: 'res' 타입을 지정해주세요. 예: ezy g res user", file=sys.stderr)
        sys.exit(1)
    elif len(args.args) == 2:
        component_type = args.args[0]
        name = args.args[1]
        generate_component(component_type, name)
    else:
        print("잘못된 인자 수입니다. 예: ezy g res user", file=sys.stderr)
        sys.exit(1)

def build_project():
    base_dir = os.getcwd()
    errors = []
    for root, _, files in os.walk(base_dir):
        for file in files:
            if file.endswith(".py"):
                path = os.path.join(root, file)
                try:
                    py_compile.compile(path, doraise=True)
                except py_compile.PyCompileError as e:
                    errors.append(f"구문 오류: {path}\n  {e.msg}")
    if errors:
        print("빌드 실패:")
        for err in errors:
            print(err)
        sys.exit(1)
    print("빌드가 성공적으로 완료되었습니다.")

def serve_project():
    main_py = os.path.join(os.getcwd(), "main.py")
    if not os.path.exists(main_py):
        print("main.py가 존재하지 않습니다.", file=sys.stderr)
        sys.exit(1)
    try:
        subprocess.run([sys.executable, main_py])
    except KeyboardInterrupt:
        print("\n서버가 중지되었습니다.")

def test_project():
    test_dir = os.path.join(os.getcwd(), "test")
    if not os.path.exists(test_dir):
        print("test 폴더가 존재하지 않습니다.", file=sys.stderr)
        sys.exit(1)
    try:
        subprocess.run(["pytest", test_dir], check=True)
    except FileNotFoundError:
        print("pytest가 설치되어 있지 않습니다. 'pip install pytest'로 설치하세요.", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError:
        print("테스트 중 오류가 발생했습니다.", file=sys.stderr)
        sys.exit(1)

def lint_project():
    try:
        subprocess.run(["flake8", "."], check=True)
        print("코드 린팅이 완료되었습니다.")
    except FileNotFoundError:
        print("flake8이 설치되어 있지 않습니다. 'pip install flake8'로 설치하세요.", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError:
        print("코드 린팅 중 문제가 발견되었습니다.", file=sys.stderr)
        sys.exit(1)

def info_project():
    print(f"Ezy CLI Version: {CLI_VERSION}")
    print(f"Python Version: {sys.version}")
    print(f"Platform: {sys.platform}")
    print(f"Current Directory: {os.getcwd()}")

def update_cli():
    print(f"Ezy CLI({CLI_VERSION})가 최신 상태입니다.")

def main():
    parser = argparse.ArgumentParser(prog="ezy", description="Ezy CLI - Ezy API 프로젝트 관리 도구")
    subparsers = parser.add_subparsers(dest="command")
    new_parser = subparsers.add_parser("new", help="새 Ezy API 프로젝트 생성")
    new_parser.add_argument("project_name", help="프로젝트 이름")
    new_parser.set_defaults(func=lambda args: new_project(args.project_name))
    generate_parser = subparsers.add_parser("generate", aliases=["g"], help="컴포넌트 생성 (예: 'res user')")
    generate_parser.add_argument("args", nargs="+", help="생성할 컴포넌트 타입과 이름 (예: 'res user')")
    generate_parser.set_defaults(func=lambda args: generate_all_or_single(args))
    build_parser = subparsers.add_parser("build", help="프로젝트 빌드 (구문 체크)")
    build_parser.set_defaults(func=lambda args: build_project())
    serve_parser = subparsers.add_parser("serve", help="개발 서버 실행")
    serve_parser.set_defaults(func=lambda args: serve_project())
    test_parser = subparsers.add_parser("test", help="테스트 실행")
    test_parser.set_defaults(func=lambda args: test_project())
    lint_parser = subparsers.add_parser("lint", help="코드 린팅 실행")
    lint_parser.set_defaults(func=lambda args: lint_project())
    info_parser = subparsers.add_parser("info", help="CLI 및 시스템 정보 출력")
    info_parser.set_defaults(func=lambda args: info_project())
    update_parser = subparsers.add_parser("update", help="CLI 업데이트(모의)")
    update_parser.set_defaults(func=lambda args: update_cli())
    args = parser.parse_args()
    if not args.command:
        parser.print_help()
        sys.exit(1)
    args.func(args)

if __name__ == "__main__":
    main()
